import datetime
import tkinter as tk
from tkinter import Label, messagebox, simpledialog
import pyodbc


class CKT_UTAS_AttendanceSystem(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master, bg='#F0F0F0')
        self.master = master
        self.pack()
        self.create_widgets()

        # Connect to database
        conn_str = (
            r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
            r'DBQ=C:\Users\user\Documents\PROJECT WORK RESEARCH\python atten pro 1\Database2.accdb;'
        )
        self.conn = pyodbc.connect(conn_str)
        self.c = self.conn.cursor()

    def create_widgets(self):
        self.logo = tk.PhotoImage(file='LOGO.png')
        self.logo_label = tk.Label(self, image=self.logo, bg='#F0F0F0')
        self.logo_label.pack(side="top", pady=10)

        self.label = tk.Label(self, text="Enter your student ID to take attendance:", bg='#F0F0F0', fg='#333')
        self.label.pack(side="top", pady=10)

        self.scan_button = tk.Button(self, text="Click to Enter ID", command=self.scan_student_id, bg='#4CAF50', fg='white', padx=20, pady=10)
        self.scan_button.pack(side="top", pady=10)


        add_student_button = tk.Button(self, text="Add New Student", command=self.show_add_student_dialog, bg='#4CAF50', fg='white', padx=20, pady=10)
        add_student_button.pack(side="top", pady=10)
        
        view_attendance_button = tk.Button(self, text="View Attendance List", command=self.show_view_attendance_dialog, bg='#4CAF50', fg='white', padx=20, pady=10)
        view_attendance_button.pack(side="top", pady=10)
        
        search_button = tk.Button(self, text="Search", command=self.show_search_dialog, bg='#4CAF50', fg='white', padx=20, pady=10)
        search_button.pack(side="top", pady=10)

    


    def show_add_student_dialog(self):
        add_student_window = tk.Toplevel(self)
        add_student_window.title("Add New Student")
        add_student_window.geometry("300x200")
        add_student_window.configure(bg='#F0F0F0')
        add_student_window.iconbitmap('LOGO.ico')
        add_student_window.resizable(False, False)

        # Add student ID label and input field
        student_id_label = tk.Label(add_student_window, text="Student ID:", bg='#F0F0F0', fg='#333')
        student_id_label.pack(pady=10)
        student_id_entry = tk.Entry(add_student_window)
        student_id_entry.pack()

        # Add student name label and input field
        name_label = tk.Label(add_student_window, text="Name:", bg='#F0F0F0', fg='#333')
        name_label.pack(pady=10)
        name_entry = tk.Entry(add_student_window)
        name_entry.pack()

        # Add submit button
        submit_button = tk.Button(add_student_window, text="Submit", command=lambda: self.add_student_to_database(student_id_entry.get(), name_entry.get(), add_student_window))
        submit_button.pack(pady=10)

    def add_student_to_database(self, student_id, name, add_student_window):
        if not student_id:
            messagebox.showerror("Error", "Please enter the student ID!")
            return
        if not name:
            messagebox.showerror("Error", "Please enter the student's name!")
            return
        # Save the new student details to the database
        self.c.execute("INSERT INTO students (student_id, name) VALUES (?, ?)", (student_id, name))
        self.conn.commit()
        messagebox.showinfo("Success", "New student added successfully!")
        add_student_window.destroy()


    def scan_student_id(self):

         student_id = simpledialog.askstring("Student ID", "Enter the student ID:")
         
         
         if not student_id:
            return

         student = self.c.execute("SELECT * FROM students WHERE student_id=?", (student_id,)).fetchone()
         if student is not None:
            name = student[1]
            verify = messagebox.askyesno("Verification", f"Are you {name}?")
            if verify:
                attendance_date = datetime.date.today().strftime("%Y-%m-%d")
                attendance_status = "present"
                self.c.execute("INSERT INTO attendance (attendance_date, student_id, attendance_status) VALUES (?, ?, ?)", (attendance_date, student_id, attendance_status))
                self.conn.commit()
                messagebox.showinfo("PRESENT!")
            else:
                messagebox.showinfo("Sorry, your identity could not be verified!")
               
         else:
            messagebox.showinfo("Sorry, your student ID is not registered in the system!")
    
    def show_view_attendance_dialog(self):
     view_attendance_window = tk.Toplevel(self)
     view_attendance_window.title("View Attendance")
     view_attendance_window.geometry("300x200")
     view_attendance_window.configure(bg='#F0F0F0')
     view_attendance_window.iconbitmap('LOGO.ico')
     view_attendance_window.resizable(False, False)

    # Add date label and input field
     date_label = tk.Label(view_attendance_window, text="Select Date (mm-dd-yyyy):", bg='#F0F0F0', fg='#333')
     date_label.pack(pady=10)
     date_entry = tk.Entry(view_attendance_window)
     date_entry.pack()

    # Add submit button
     submit_button = tk.Button(view_attendance_window, text="Submit", command=lambda: self.view_attendance(date_entry.get(), view_attendance_window))
     submit_button.pack(pady=10)

    def view_attendance(self, date, view_attendance_window):
     
    # Fetch attendance data from the database
     attendance_data = self.c.execute("SELECT * FROM attendance WHERE attendance_date=?", (date,)).fetchall()

    # Create a label to display the attendance data
     attendance_label = tk.Label(view_attendance_window, text="Attendance for " + date + ":", bg='#F0F0F0', fg='#333')
     attendance_label.pack(pady=10)

    # Create a text widget to display the attendance data
     text_widget = tk.Text(view_attendance_window)
     text_widget.pack()

    # Display the attendance data in the text widget
     for attendance in attendance_data:
        student_id = attendance[1]
        attendance_status = attendance[2]
        student = self.c.execute("SELECT * FROM students WHERE student_id=?", (student_id,)).fetchone()
        name = student[1]
        text_widget.insert(tk.END, f"{name} ({student_id}): {attendance_status}\n")

    # Disable editing of the text widget
     text_widget.configure(state=tk.DISABLED)
    
    def show_search_dialog(self):
     search_window = tk.Toplevel(self)
     search_window.title("Search Student")
     search_window.geometry("300x200")
     search_window.configure(bg='#F0F0F0')
     search_window.iconbitmap('LOGO.ico')
     search_window.resizable(False, False)

    # Add search label and input field
     search_label = tk.Label(search_window, text="Enter Student ID:", bg='#F0F0F0', fg='#333')
     search_label.pack(pady=10)
     search_entry = tk.Entry(search_window)
     search_entry.pack()
 
    # Add search button
     submit_button = tk.Button(search_window, text="Search", command=lambda: self.search_student(search_entry.get(), search_window))
     submit_button.pack(pady=10)
     
    def search_student(self, student_id, search_window):
     if not student_id:
        messagebox.showerror("Error", "Please enter the student ID!")
        return
     student = self.c.execute("SELECT * FROM students WHERE student_id=?", (student_id,)).fetchone()
     if student is not None:
        name = student[1]
        attendance = self.c.execute("SELECT * FROM attendance WHERE student_id=?", (student_id,)).fetchall()
        if attendance:
            attendance_list = []
            for a in attendance:
                attendance_list.append(f"{a[0]}: {a[2]}")
            attendance_text = "\n".join(attendance_list)
            messagebox.showinfo(f"Attendance for {name}", attendance_text)
        else:
            messagebox.showinfo("No Attendance Found", f"No attendance found for {name}")
        search_window.destroy()
     else:
        messagebox.showinfo("Student Not Found", "The student ID entered could not be found in the database.")



       

def __del__(self):
        # Close

        # Close database connection
        self.conn.commit()
        self.conn.close()

root = tk.Tk()
root.title('CKT UTAS ATTENDANCE SYSTEM')
root.geometry('300x250')
root.configure(bg='#F0F0F0')
root.iconbitmap('LOGO.ico')
app = CKT_UTAS_AttendanceSystem(master=root)
app.mainloop()
